<?php

/**
 * @file
 * cavalla_review_scorecard module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function cavalla_reviews_feed_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.cavalla_review_scorecard':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 * Lets us define our paragraphs templates in this module.
 */
function cavalla_reviews_feed_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__cavalla_reviews_feed' => [
      'base hook' => 'paragraph',
    ],

  ];
}

function cavalla_reviews_feed_preprocess(&$variables){
  $reviews = views_get_view_results('page', 'cavalla_review_scorecard');
  $variables['reviews']= $reviews;
}

function views_get_view_results($name, $display_id = NULL) {
  $args = func_get_args();
  // Remove $name and $display_id from the arguments.
  unset($args[0], $args[1]);
  $view = Views::getView($name);
  $view->setArguments($args);
  $view->setDisplay($display_id);
  $view->execute();
  return  $view->render($display_id);
}
